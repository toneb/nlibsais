name: Build native assets

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: true

      matrix:
        os: [macos-latest]
        build_type: [Release]
        c_compiler: [clang]
        include:
          - os: macos-latest
            c_compiler: clang
 
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DLIBSAIS_BUILD_SHARED_LIB=ON
        -DCMAKE_C_FLAGS="-Ofast"
        -S ${{ github.workspace }}/libsais

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build--${{ matrix.os }}-${{ matrix.architecture }}
        path: |
          ${{ steps.strings.outputs.build-output-dir }}/Release/libsais.dll
          ${{ steps.strings.outputs.build-output-dir }}/libsais.so
          ${{ steps.strings.outputs.build-output-dir }}/libsais.dylib
        if-no-files-found: ignore

  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Configure x64
      run: >
        cmake -B build-x64
        -DCMAKE_C_COMPILER=cl
        -DLIBSAIS_BUILD_SHARED_LIB=ON
        -DCMAKE_C_FLAGS="-Ofast"
        -A x64
        -S libsais

    - name: Build x64
      run: cmake --build build-x64 --config Release
      
    - name: Configure x86
      run: >
        cmake -B build-x86
        -DCMAKE_C_COMPILER=cl
        -DLIBSAIS_BUILD_SHARED_LIB=ON
        -DCMAKE_C_FLAGS="-Ofast"
        -A Win32
        -S libsais

    - name: Build x86
      run: cmake --build build-x86 --config Release

    - name: Configure arm64
      run: >
        cmake -B build-arm64
        -DCMAKE_C_COMPILER=cl
        -DLIBSAIS_BUILD_SHARED_LIB=ON
        -DCMAKE_C_FLAGS="-Ofast"
        -A arm64
        -S libsais

    - name: Build arm64
      run: cmake --build build-arm64 --config Release

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-windows
        path: |
          build-x64/Release/libsais.dll
          build-x86/Release/libsais.dll
          build-arm64/Release/libsais.dll


  build-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Configure x64
      run: >
        cmake -B build-x64
        -DCMAKE_C_COMPILER=clang
        -DLIBSAIS_BUILD_SHARED_LIB=ON
        -DCMAKE_C_FLAGS="-Ofast"
        -S libsais

    - name: Build x64
      run: cmake --build build-x64 --config Release
      
    - name: Configure arm32
      run: >
        cmake -B build-arm32
        -DCMAKE_C_COMPILER=clang
        -DLIBSAIS_BUILD_SHARED_LIB=ON
        -DCMAKE_C_FLAGS="-Ofast"
        -DCMAKE_SYSTEM_PROCESSOR=arm
        -DCMAKE_C_COMPILER_TARGET=arm-linux-gnueabihf
        -S libsais

    - name: Build arm32
      run: cmake --build build-arm32 --config Release

    - name: Configure arm64
      run: >
        cmake -B build-arm64
        -DCMAKE_C_COMPILER=clang
        -DLIBSAIS_BUILD_SHARED_LIB=ON
        -DCMAKE_C_FLAGS="-Ofast"
        -DCMAKE_SYSTEM_PROCESSOR=arm64
        -DCMAKE_C_COMPILER_TARGET=arm64-linux-gnueabihf
        -S libsais

    - name: Build arm64
      run: cmake --build build-arm64 --config Release

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-windows
        path: |
          build-x64/libsais.so
          build-arm32/libsais.so
          build-arm64/libsais.so
          
    
        
  publish-native-assets:
    needs: [build, build-windows, build-linux]
    runs-on: ubuntu-latest
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        path: build-artifacts
