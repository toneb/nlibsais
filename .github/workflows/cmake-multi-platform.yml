name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: true

      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        architecture: [x86, x68, arm32, arm64]
        build_type: [Release]
        c_compiler: [clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
          - os: ubuntu-latest
            c_compiler: clang
          - os: macos-latest
            c_compiler: clang
        exclude:
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: cl
          - os: windows-latest
            architecture: arm32
          - os: ubuntu-latest
            architecture: x86
          - os: macos-latest
            architecture: x86
          - os: macos-latest
            architecture: arm32
 
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DLIBSAIS_BUILD_SHARED_LIB=ON
        -DCMAKE_C_FLAGS="-Ofast"
        -S ${{ github.workspace }}/libsais

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build--${{ matrix.os }}-${{ matrix.architecture }}
        path: ${{ steps.strings.outputs.build-output-dir }}

  publish-native-assets:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        path: build-artifacts
